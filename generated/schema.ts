// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Address,
  Bytes,
  BigInt,
  BigDecimal
} from "@graphprotocol/graph-ts";

export class Gravatar extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save Gravatar entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save Gravatar entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("Gravatar", id.toString(), this);
  }

  static load(id: string): Gravatar | null {
    return store.get("Gravatar", id) as Gravatar | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get owner(): Bytes {
    let value = this.get("owner");
    return value.toBytes();
  }

  set owner(value: Bytes) {
    this.set("owner", Value.fromBytes(value));
  }

  get displayName(): string {
    let value = this.get("displayName");
    return value.toString();
  }

  set displayName(value: string) {
    this.set("displayName", Value.fromString(value));
  }

  get imageUrl(): string {
    let value = this.get("imageUrl");
    return value.toString();
  }

  set imageUrl(value: string) {
    this.set("imageUrl", Value.fromString(value));
  }
}

export class GetCash extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save GetCash entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save GetCash entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("GetCash", id.toString(), this);
  }

  static load(id: string): GetCash | null {
    return store.get("GetCash", id) as GetCash | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get cash(): BigInt {
    let value = this.get("cash");
    return value.toBigInt();
  }

  set cash(value: BigInt) {
    this.set("cash", Value.fromBigInt(value));
  }
}

export class TotalBorrow extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save TotalBorrow entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save TotalBorrow entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("TotalBorrow", id.toString(), this);
  }

  static load(id: string): TotalBorrow | null {
    return store.get("TotalBorrow", id) as TotalBorrow | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrow(): BigInt {
    let value = this.get("borrow");
    return value.toBigInt();
  }

  set borrow(value: BigInt) {
    this.set("borrow", Value.fromBigInt(value));
  }
}

export class SupplyRatePerBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save SupplyRatePerBlock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save SupplyRatePerBlock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("SupplyRatePerBlock", id.toString(), this);
  }

  static load(id: string): SupplyRatePerBlock | null {
    return store.get("SupplyRatePerBlock", id) as SupplyRatePerBlock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }
}

export class BorrowRatePerBlock extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save BorrowRatePerBlock entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save BorrowRatePerBlock entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("BorrowRatePerBlock", id.toString(), this);
  }

  static load(id: string): BorrowRatePerBlock | null {
    return store.get("BorrowRatePerBlock", id) as BorrowRatePerBlock | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get rate(): BigInt {
    let value = this.get("rate");
    return value.toBigInt();
  }

  set rate(value: BigInt) {
    this.set("rate", Value.fromBigInt(value));
  }
}

export class HtBorrowImpl extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id !== null, "Cannot save HtBorrowImpl entity without an ID");
    assert(
      id.kind == ValueKind.STRING,
      "Cannot save HtBorrowImpl entity with non-string ID. " +
        'Considering using .toHex() to convert the "id" to a string.'
    );
    store.set("HtBorrowImpl", id.toString(), this);
  }

  static load(id: string): HtBorrowImpl | null {
    return store.get("HtBorrowImpl", id) as HtBorrowImpl | null;
  }

  get id(): string {
    let value = this.get("id");
    return value.toString();
  }

  set id(value: string) {
    this.set("id", Value.fromString(value));
  }

  get borrower(): Bytes | null {
    let value = this.get("borrower");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set borrower(value: Bytes | null) {
    if (value === null) {
      this.unset("borrower");
    } else {
      this.set("borrower", Value.fromBytes(value as Bytes));
    }
  }

  get borrowAmount(): BigInt | null {
    let value = this.get("borrowAmount");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set borrowAmount(value: BigInt | null) {
    if (value === null) {
      this.unset("borrowAmount");
    } else {
      this.set("borrowAmount", Value.fromBigInt(value as BigInt));
    }
  }

  get accountBorrows(): BigInt | null {
    let value = this.get("accountBorrows");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set accountBorrows(value: BigInt | null) {
    if (value === null) {
      this.unset("accountBorrows");
    } else {
      this.set("accountBorrows", Value.fromBigInt(value as BigInt));
    }
  }

  get totalBorrows(): BigInt | null {
    let value = this.get("totalBorrows");
    if (value === null || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBigInt();
    }
  }

  set totalBorrows(value: BigInt | null) {
    if (value === null) {
      this.unset("totalBorrows");
    } else {
      this.set("totalBorrows", Value.fromBigInt(value as BigInt));
    }
  }
}
